diff --git a/app/src/main/java/com/adjust/sdk/Adjust.java b/app/src/main/java/com/adjust/sdk/Adjust.java
new file mode 100644
index 000000000..7e644e2fa
--- /dev/null
+++ b/app/src/main/java/com/adjust/sdk/Adjust.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.content.Context;
+
+public class Adjust {
+    public static void onCreate(AdjustConfig adjustConfig) {
+    }
+
+    public static void onResume() {
+    }
+
+    public static void onPause() {
+    }
+
+    public static void setEnabled(boolean enabled) {
+    }
+
+    public static void gdprForgetMe(final Context context) {
+    }
+}
diff --git a/app/src/main/java/com/adjust/sdk/AdjustAttribution.java b/app/src/main/java/com/adjust/sdk/AdjustAttribution.java
new file mode 100644
index 000000000..ab6b3badb
--- /dev/null
+++ b/app/src/main/java/com/adjust/sdk/AdjustAttribution.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import java.io.Serializable;
+
+public class AdjustAttribution implements Serializable {
+    public String network;
+    public String campaign;
+    public String adgroup;
+    public String creative;
+
+    @Override
+    public boolean equals(Object other) {
+        return false;
+    }
+
+    @Override
+    public int hashCode() {
+        return 0;
+    }
+
+    @Override
+    public String toString() {
+        return "";
+    }
+}
diff --git a/app/src/main/java/com/adjust/sdk/AdjustConfig.java b/app/src/main/java/com/adjust/sdk/AdjustConfig.java
new file mode 100644
index 000000000..6753dd7d9
--- /dev/null
+++ b/app/src/main/java/com/adjust/sdk/AdjustConfig.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.content.Context;
+
+import java.util.List;
+
+public class AdjustConfig {
+    public static final String ENVIRONMENT_SANDBOX = "sandbox";
+    public static final String ENVIRONMENT_PRODUCTION = "production";
+
+    public AdjustConfig(Context context, String appToken, String environment) {
+    }
+
+    public AdjustConfig(Context context, String appToken, String environment, boolean allowSuppressLogLevel) {
+    }
+
+    public void setOnAttributionChangedListener(OnAttributionChangedListener onAttributionChangedListener) {
+    }
+
+    public void setLogLevel(LogLevel logLevel) {
+    }
+}
diff --git a/app/src/main/java/com/adjust/sdk/LogLevel.java b/app/src/main/java/com/adjust/sdk/LogLevel.java
new file mode 100644
index 000000000..27ac3de54
--- /dev/null
+++ b/app/src/main/java/com/adjust/sdk/LogLevel.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.util.Log;
+
+/**
+ * Created by pfms on 11/03/15.
+ */
+public enum LogLevel {
+    VERBOSE(Log.VERBOSE), DEBUG(Log.DEBUG), INFO(Log.INFO), WARN(Log.WARN), ERROR(Log.ERROR), ASSERT(Log.ASSERT), SUPRESS(8);
+    final int androidLogLevel;
+
+    LogLevel(final int androidLogLevel) {
+        this.androidLogLevel = androidLogLevel;
+    }
+
+    public int getAndroidLogLevel() {
+        return androidLogLevel;
+    }
+}
diff --git a/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java b/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java
new file mode 100644
index 000000000..7efa1c680
--- /dev/null
+++ b/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+public interface OnAttributionChangedListener {
+    void onAttributionChanged(AdjustAttribution attribution);
+}
diff --git a/app/src/main/java/com/google/android/gms/ads/identifier/AdvertisingIdClient.java b/app/src/main/java/com/google/android/gms/ads/identifier/AdvertisingIdClient.java
new file mode 100644
index 000000000..0f2a47b14
--- /dev/null
+++ b/app/src/main/java/com/google/android/gms/ads/identifier/AdvertisingIdClient.java
@@ -0,0 +1,23 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package com.google.android.gms.ads.identifier;
+
+import android.content.Context;
+
+public class AdvertisingIdClient {
+
+    public static final class Info {
+
+        public String getId() {
+            return "";
+        }
+
+    }
+
+    public static Info getAdvertisingIdInfo(Context context) {
+        return new Info();
+    }
+
+}
diff --git a/app/src/main/java/com/google/android/gms/common/GooglePlayServicesNotAvailableException.java b/app/src/main/java/com/google/android/gms/common/GooglePlayServicesNotAvailableException.java
new file mode 100644
index 000000000..d3bff1249
--- /dev/null
+++ b/app/src/main/java/com/google/android/gms/common/GooglePlayServicesNotAvailableException.java
@@ -0,0 +1,8 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package com.google.android.gms.common;
+
+public class GooglePlayServicesNotAvailableException extends Exception {
+}
diff --git a/app/src/main/java/com/google/android/gms/common/GooglePlayServicesRepairableException.java b/app/src/main/java/com/google/android/gms/common/GooglePlayServicesRepairableException.java
new file mode 100644
index 000000000..b72a7cdb1
--- /dev/null
+++ b/app/src/main/java/com/google/android/gms/common/GooglePlayServicesRepairableException.java
@@ -0,0 +1,8 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package com.google.android.gms.common;
+
+public class GooglePlayServicesRepairableException extends Exception {
+}
diff --git a/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java b/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java
new file mode 100644
index 000000000..4d5fd8153
--- /dev/null
+++ b/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java
@@ -0,0 +1,42 @@
+// Copyright 2020 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package com.google.firebase.messaging;
+
+import android.app.Service;
+import android.content.Intent;
+import android.os.Binder;
+import android.os.IBinder;
+
+public class FirebaseMessagingService extends Service {
+
+    private final IBinder mBinder = new Binder();
+
+    public void onMessageReceived(RemoteMessage message) {
+    }
+
+    public void onMessageSent(String msgId) {
+    }
+
+    public void onNewToken(String token) {
+    }
+
+    public void onSendError(String msgId, Exception exception) {
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return mBinder;
+    }
+
+}
diff --git a/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java b/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java
new file mode 100644
index 000000000..9ad59a31e
--- /dev/null
+++ b/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java
@@ -0,0 +1,33 @@
+// Copyright 2020 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package com.google.firebase.messaging;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import java.util.Map;
+
+public class RemoteMessage implements Parcelable {
+
+    public int describeContents() {
+        return 0;
+    }
+
+    public void writeToParcel(Parcel out, int flags) {
+    }
+
+    public Map<String, String> getData() {
+        return null;
+    }
+
+}
diff --git a/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt b/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt
new file mode 100644
index 000000000..b50a6f03a
--- /dev/null
+++ b/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt
@@ -0,0 +1,32 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package mozilla.components.lib.push.firebase
+
+import android.content.Context
+import com.google.firebase.messaging.FirebaseMessagingService
+import com.google.firebase.messaging.RemoteMessage
+import mozilla.components.concept.push.PushService
+
+abstract class AbstractFirebasePushService() : FirebaseMessagingService(), PushService {
+
+    override fun start(context: Context) {
+    }
+
+    override fun onNewToken(newToken: String) {
+    }
+
+    override fun onMessageReceived(remoteMessage: RemoteMessage?) {
+    }
+
+    final override fun stop() {
+    }
+
+    override fun deleteToken() {
+    }
+
+    override fun isServiceAvailable(context: Context): Boolean {
+        return false
+    }
+}
diff --git a/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt b/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
index c805b481f..b34675348 100644
--- a/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
+++ b/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
@@ -59,7 +59,7 @@ object FeatureFlags {
     fun isPocketRecommendationsFeatureEnabled(context: Context): Boolean {
         val langTag = LocaleManager.getCurrentLocale(context)
             ?.toLanguageTag() ?: getSystemDefault().toLanguageTag()
-        return listOf("en-US", "en-CA").contains(langTag)
+        return false && listOf("en-US", "en-CA").contains(langTag)
     }
 
     /**
diff --git a/app/src/main/java/org/mozilla/fenix/components/Components.kt b/app/src/main/java/org/mozilla/fenix/components/Components.kt
index 2b7be407c..9be7fb1fa 100644
--- a/app/src/main/java/org/mozilla/fenix/components/Components.kt
+++ b/app/src/main/java/org/mozilla/fenix/components/Components.kt
@@ -11,7 +11,6 @@ import android.os.StrictMode
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.platform.LocalContext
 import androidx.core.net.toUri
-import com.google.android.play.core.review.ReviewManagerFactory
 import mozilla.components.feature.addons.AddonManager
 import mozilla.components.feature.addons.amo.AddonCollectionProvider
 import mozilla.components.feature.addons.migration.DefaultSupportedAddonsChecker
@@ -179,7 +178,6 @@ class Components(private val context: Context) {
 
     val reviewPromptController by lazyMonitored {
         ReviewPromptController(
-            manager = ReviewManagerFactory.create(context),
             reviewSettings = FenixReviewSettings(settings)
         )
     }
diff --git a/app/src/main/java/org/mozilla/fenix/components/Core.kt b/app/src/main/java/org/mozilla/fenix/components/Core.kt
index 7edbf2dff..09cafcc51 100644
--- a/app/src/main/java/org/mozilla/fenix/components/Core.kt
+++ b/app/src/main/java/org/mozilla/fenix/components/Core.kt
@@ -402,8 +402,14 @@ class Core(
                 } else {
                     defaultTopSites.add(
                         Pair(
-                            context.getString(R.string.default_top_site_google),
-                            SupportUtils.GOOGLE_URL
+                            context.getString(R.string.default_top_site_fdroid),
+                            SupportUtils.FDROID_URL
+                        )
+                    )
+                    defaultTopSites.add(
+                        Pair(
+                            context.getString(R.string.default_top_site_eff),
+                            SupportUtils.EFF_URL
                         )
                     )
 
diff --git a/app/src/main/java/org/mozilla/fenix/components/ReviewPromptController.kt b/app/src/main/java/org/mozilla/fenix/components/ReviewPromptController.kt
index 9793c0112..bd6040c5b 100644
--- a/app/src/main/java/org/mozilla/fenix/components/ReviewPromptController.kt
+++ b/app/src/main/java/org/mozilla/fenix/components/ReviewPromptController.kt
@@ -6,7 +6,6 @@ package org.mozilla.fenix.components
 
 import android.app.Activity
 import androidx.annotation.VisibleForTesting
-import com.google.android.play.core.review.ReviewManager
 import kotlinx.coroutines.Dispatchers.Main
 import kotlinx.coroutines.withContext
 import org.mozilla.fenix.utils.Settings
@@ -40,19 +39,9 @@ class FenixReviewSettings(
  * Controls the Review Prompt behavior.
  */
 class ReviewPromptController(
-    private val manager: ReviewManager,
     private val reviewSettings: ReviewSettings,
     private val timeNowInMillis: () -> Long = { System.currentTimeMillis() },
-    private val tryPromptReview: suspend (Activity) -> Unit = { activity ->
-        val flow = manager.requestReviewFlow()
-
-        withContext(Main) {
-            flow.addOnCompleteListener {
-                if (it.isSuccessful) {
-                    manager.launchReviewFlow(activity, it.result)
-                }
-            }
-        }
+    private val tryPromptReview: suspend (Activity) -> Unit = { _ ->
     }
 ) {
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
diff --git a/app/src/main/java/org/mozilla/fenix/home/topsites/TopSiteItemViewHolder.kt b/app/src/main/java/org/mozilla/fenix/home/topsites/TopSiteItemViewHolder.kt
index 15f3a34a4..ac1c8eba1 100644
--- a/app/src/main/java/org/mozilla/fenix/home/topsites/TopSiteItemViewHolder.kt
+++ b/app/src/main/java/org/mozilla/fenix/home/topsites/TopSiteItemViewHolder.kt
@@ -116,6 +116,12 @@ class TopSiteItemViewHolder(
                 SupportUtils.MEITUAN_URL -> {
                     binding.faviconImage.setImageDrawable(getDrawable(itemView.context, R.drawable.ic_meituan))
                 }
+                SupportUtils.FDROID_URL -> {
+                    binding.faviconImage.setImageDrawable(getDrawable(itemView.context, R.drawable.ic_fdroid))
+                }
+                SupportUtils.EFF_URL -> {
+                    binding.faviconImage.setImageDrawable(getDrawable(itemView.context, R.drawable.ic_eff))
+                }
                 else -> {
                     itemView.context.components.core.icons.loadIntoView(binding.faviconImage, topSite.url)
                 }
diff --git a/app/src/main/java/org/mozilla/fenix/settings/SupportUtils.kt b/app/src/main/java/org/mozilla/fenix/settings/SupportUtils.kt
index 77ee7debd..71d19eb1e 100644
--- a/app/src/main/java/org/mozilla/fenix/settings/SupportUtils.kt
+++ b/app/src/main/java/org/mozilla/fenix/settings/SupportUtils.kt
@@ -36,6 +36,8 @@ object SupportUtils {
     const val MEITUAN_URL = "https://tb.j5k6.com/6ZSOp"
     const val GOOGLE_US_URL = "https://www.google.com/webhp?client=firefox-b-1-m&channel=ts"
     const val GOOGLE_XX_URL = "https://www.google.com/webhp?client=firefox-b-m&channel=ts"
+    const val FDROID_URL = "https://f-droid.org/"
+    const val EFF_URL = "https://www.eff.org/"
 
     enum class SumoTopic(internal val topicStr: String) {
         HELP("faq-android"),
diff --git a/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 85a438678..24e6b9299 100644
--- a/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -244,17 +244,17 @@ class Settings(private val appContext: Context) : PreferencesHolder {
 
     val isTelemetryEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_telemetry),
-        default = true
+        default = false
     )
 
     val isMarketingTelemetryEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry),
-        default = true
+        default = false
     )
 
     var isExperimentationEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_experimentation),
-        default = true
+        default = false
     )
 
     var isOverrideTPPopupsForPerformanceTest = false
@@ -1285,7 +1285,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     var showPocketRecommendationsFeature by lazyFeatureFlagPreference(
         appContext.getPreferenceKey(R.string.pref_key_pocket_homescreen_recommendations),
         featureFlag = FeatureFlags.isPocketRecommendationsFeatureEnabled(appContext),
-        default = { homescreenSections[HomeScreenSection.POCKET] == true },
+        default = { false },
     )
 
     /**
diff --git a/app/src/main/res/values/static_strings_extra.xml b/app/src/main/res/values/static_strings_extra.xml
new file mode 100644
index 000000000..101f4e0d0
--- /dev/null
+++ b/app/src/main/res/values/static_strings_extra.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8" standalone="yes"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<resources>
+    <string name="default_top_site_fdroid" translatable="false">F-Droid</string>
+    <string name="default_top_site_eff" translatable="false">EFF</string>
+</resources>
diff --git a/app/src/main/res/xml/preferences.xml b/app/src/main/res/xml/preferences.xml
index 9e78617b0..bfa8fc98a 100644
--- a/app/src/main/res/xml/preferences.xml
+++ b/app/src/main/res/xml/preferences.xml
@@ -135,11 +135,6 @@
             app:iconSpaceReserved="false"
             android:title="@string/preferences_notifications" />
 
-        <androidx.preference.Preference
-            android:key="@string/pref_key_data_choices"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_data_collection" />
-
     </androidx.preference.PreferenceCategory>
 
     <PreferenceCategory
@@ -186,11 +181,6 @@
         android:title="@string/preferences_category_about"
         app:iconSpaceReserved="false"
         android:layout="@layout/preference_category_no_icon_style">
-        <androidx.preference.Preference
-            android:key="@string/pref_key_rate"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_rate" />
-
         <androidx.preference.Preference
             android:key="@string/pref_key_about"
             app:iconSpaceReserved="false"
diff --git a/app/src/main/res/xml/site_permissions_details_exceptions_preferences.xml b/app/src/main/res/xml/site_permissions_details_exceptions_preferences.xml
index 6bb8cfbbe..1c15b5897 100644
--- a/app/src/main/res/xml/site_permissions_details_exceptions_preferences.xml
+++ b/app/src/main/res/xml/site_permissions_details_exceptions_preferences.xml
@@ -3,7 +3,8 @@
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <androidx.preference.PreferenceScreen
-        xmlns:android="http://schemas.android.com/apk/res/android">
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto">
     <androidx.preference.Preference
             android:icon="@drawable/ic_camera_enabled"
             android:key="@string/pref_key_phone_feature_camera"
@@ -44,7 +45,8 @@
         android:icon="@drawable/ic_link"
         android:key="@string/pref_key_browser_feature_media_key_system_access"
         android:title="@string/preference_phone_feature_media_key_system_access"
-        android:summary="@string/preference_option_phone_feature_ask_to_allow"/>
+        android:summary="@string/preference_option_phone_feature_ask_to_allow"
+        app:isPreferenceVisible="false"/>
 
     <androidx.preference.Preference
         android:icon="@drawable/ic_autoplay"
diff --git a/app/src/main/res/xml/site_permissions_preferences.xml b/app/src/main/res/xml/site_permissions_preferences.xml
index d053c49e9..7dd704407 100644
--- a/app/src/main/res/xml/site_permissions_preferences.xml
+++ b/app/src/main/res/xml/site_permissions_preferences.xml
@@ -55,6 +55,7 @@
         android:key="@string/pref_key_browser_feature_media_key_system_access"
         android:title="@string/preference_phone_feature_media_key_system_access"
         android:summary="@string/preference_option_phone_feature_ask_to_allow"
+        app:isPreferenceVisible="false"
         app:allowDividerBelow="true"/>
 
     <androidx.preference.Preference
diff --git a/buildSrc/src/main/java/Dependencies.kt b/buildSrc/src/main/java/Dependencies.kt
index 03acdabe6..261d3bc25 100644
--- a/buildSrc/src/main/java/Dependencies.kt
+++ b/buildSrc/src/main/java/Dependencies.kt
@@ -159,7 +159,6 @@ object Deps {
     const val mozilla_lib_crash = "org.mozilla.components:lib-crash:${Versions.mozilla_android_components}"
     const val lib_crash_sentry =
         "org.mozilla.components:lib-crash-sentry:${Versions.mozilla_android_components}"
-    const val mozilla_lib_push_firebase = "org.mozilla.components:lib-push-firebase:${Versions.mozilla_android_components}"
     const val mozilla_lib_dataprotect = "org.mozilla.components:lib-dataprotect:${Versions.mozilla_android_components}"
     const val mozilla_lib_state = "org.mozilla.components:lib-state:${Versions.mozilla_android_components}"
 
@@ -214,9 +213,6 @@ object Deps {
     const val protobuf_javalite = "com.google.protobuf:protobuf-javalite:${Versions.protobuf}"
     const val protobuf_compiler = "com.google.protobuf:protoc:${Versions.protobuf}"
 
-    const val adjust = "com.adjust.sdk:adjust-android:${Versions.adjust}"
-    const val installreferrer = "com.android.installreferrer:installreferrer:${Versions.installreferrer}"
-
     const val jna = "net.java.dev.jna:jna:${Versions.jna}@jar"
 
     const val junit = "junit:junit:${Versions.junit}"
@@ -248,11 +244,6 @@ object Deps {
     const val uiautomator = "androidx.test.uiautomator:uiautomator:${Versions.uiautomator}"
     const val robolectric = "org.robolectric:robolectric:${Versions.robolectric}"
 
-    const val google_ads_id = "com.google.android.gms:play-services-ads-identifier:${Versions.google_ads_id_version}"
-
-    // Required for in-app reviews
-    const val google_play_store = "com.google.android.play:core:${Versions.google_play_store_version}"
-
     const val detektApi = "io.gitlab.arturbosch.detekt:detekt-api:${Versions.detekt}"
     const val detektTest = "io.gitlab.arturbosch.detekt:detekt-test:${Versions.detekt}"
     const val junitApi = "org.junit.jupiter:junit-jupiter-api:${Versions.junit}"
